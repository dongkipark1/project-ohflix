<div id="modalWrap"> <!-- 모달 창을 감싸는 div -->
    <div id="modalBody">
        <span id="closeBtn">&times;</span> <!-- 모달을 닫는 X 버튼 -->
        <div id="modalData">

        </div>
    </div>
</div>
<style>


</style>
<!-- SHAKA PLAYER-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/3.2.1/shaka-player.compiled.js"></script>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const contents = document.querySelectorAll('.content');
        const modal = document.getElementById('modalWrap'); // 모달 창 요소 가져오기
        const closeBtn = document.getElementById('closeBtn'); // 모달을 닫는 버튼(X) 요소 가져오기
        const modalData = document.getElementById('modalData'); // 모달 내용 요소 가져오기
        document.addEventListener('fullscreenchange', onFullscreenChange);
        document.addEventListener('webkitfullscreenchange', onFullscreenChange); // Safari
        document.addEventListener('mozfullscreenchange', onFullscreenChange); // Firefox
        document.addEventListener('msfullscreenchange', onFullscreenChange); // IE/Edge

        contents.forEach(content => {
            ``
            content.addEventListener('click', function () {
                const contentId = this.dataset.contentId;
                console.log(`Content clicked: ${contentId}`); // 추가 로그

                showModal(contentId);
            });
        });

        closeBtn.onclick = function () {
            modal.style.display = "none"; // 모달을 닫는 버튼(X)을 클릭하면 모달을 숨김
            document.body.style.overflow = "auto";
        };

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none"; // 모달 외부를 클릭하면 모달을 숨김
                document.body.style.overflow = "auto";
            }
        };

        function showModal(contentId) {
            modal.style.display = "block"; // 모달을 보이게 함
            document.body.style.overflow = "hidden";

            // AJAX 통신으로 데이터 가져오기
            fetch(`/api/content-info/${contentId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        modalData.innerHTML = `
                <div class="body-container">
                    <!-- 헤더 start -->
                    <div class="header-container">
                        <img src="${data.response.mainPhoto}" class="background-image"/>
                        <div class="play">
                            <div class="title">
                                <img src="${data.response.textPhoto}" />
                            </div>
                            <div class="buttons">
                                <a href="#" class="play-button playButton" data-filename="${data.response.videoPath}">▶ 재생</a>
                                <button id="favoriteButton" class="icon">
                                    ${data.response.isFavorite ? '<i class="fa-solid fa-check"></i>' : '<i class="fa-solid fa-plus"></i>'}
                                </button>
                                <button id="likeButton" class="icon">
                                    ${data.response.isLike ? '<i class="fa-solid fa-thumbs-up"></i>' : '<i class="fa-regular fa-thumbs-up"></i>'}
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- 헤더 end -->

                    <div class="containermargin">
                        <div class="container">
                            <div class="introduce">
                                <div class="info">
                                    <span class="match">98% 일치</span>
                                    <span>${data.response.productYear}</span>
                                    <span>${data.response.playTime}</span>
                                    <span>HD</span>
                                </div>
                                <div class="metadata">
                                    <div><img src="${data.response.rateImg}" alt="" /></div>
                                </div>
                                <div class="description">
                                    ${data.response.introduction}
                                </div>
                            </div>
                            <div class="details">
                                <div class="cast">출연: ${data.response.actors}</div>
                                <div class="genre">장르: ${data.response.genre} 영화</div>
                                <div class="features">영화 특징: ${data.response.characteristics}</div>
                            </div>
                        </div>
                        <div class="container2">
                            <div class="title2">${data.response.title}상세 정보</div>
                            <div class="details2">
                                <div>감독: ${data.response.director}</div>
                                <div>출연: ${data.response.actors}</div>
                                <div>각본: ${data.response.writers}</div>
                                <div>장르: ${data.response.genre} 영화</div>
                                <div>영화 특징: ${data.response.characteristics}</div>
                                <div class="rating">
                                    <span>관람등급: <img src="${data.response.rateImg}" alt="" />${data.response.rate}</span>
                                </div>
                            </div>
                        </div>
                        <div id="videoContainer"></div> <!-- 비디오를 동적으로 추가할 컨테이너 -->
                        <div id="qualityLevels"></div> <!-- 화질 선택 버튼을 표시할 영역 -->
                    </div>
                </div>
            `;

                        // 찜하기/찜취소 버튼 클릭 이벤트 핸들러 추가
                        const favoriteButton = document.getElementById('favoriteButton');
                        favoriteButton.addEventListener('click', function () {
                            toggleFavorite(contentId, data.response.isFavorite, favoriteButton);
                        });

                        // 좋아요/좋아요취소 버튼 클릭 이벤트 핸들러 추가
                        const likeButton = document.getElementById('likeButton');
                        likeButton.addEventListener('click', function () {
                            $.ajax({
                                url: `/api/like-status/${contentId}`,
                                type: "GET",
                                contentType: 'application/json',
                            }).done((data) => {
                                toggleLike(data.response.contentId, data.response.isLiked, likeButton);
                            }).fail(function (xhr, status, error) {
                                console.error('Error fetching content info:', error);
                            });
                        });

                        // 비디오 재생 버튼 클릭 이벤트 리스너 추가
                        document.querySelector('.playButton').addEventListener('click', function (event) {
                            event.preventDefault(); // 앵커 태그의 기본 동작을 막습니다.
                            const filename = this.dataset.filename;
                            fetch('/api/check-subscription', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.response.isSubscribed) {
                                            if (filename) {
                                                const s3BaseUrl = 'https://ohflix-bucket.s3.ap-northeast-2.amazonaws.com/';
                                                const videoUrl = `${s3BaseUrl}${filename}`;
                                                loadVideo2(videoUrl);
                                            } else {
                                                alert('동영상이 아직 업로드 되지 않았습니다');
                                            }
                                        } else {
                                            const userConfirmed = confirm('구독 후에 이용할 수 있습니다. 결제 페이지로 이동하시겠습니까?');
                                            if (userConfirmed) {
                                                window.location.href = '/api/paymethod-form'; // 결제 페이지 URL로 변경
                                            }
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        alert('서버와 통신 중 오류가 발생했습니다.');
                                    });
                        });

                        function toggleFavorite(contentId, isFavorite, favoriteButton) {
                            const url = isFavorite ? `/api/users/${contentId}/unfavorite` : `/api/users/${contentId}/favorite`;
                            fetch(url, {method: 'POST'})
                                    .then(response => {
                                        if (response.ok) {
                                            // 찜 상태를 반대로 변경
                                            const newIsFavorite = !isFavorite;
                                            // 버튼 아이콘 업데이트
                                            favoriteButton.innerHTML = newIsFavorite ? '<i class="fa-solid fa-check"></i>' : '<i class="fa-solid fa-plus"></i>';
                                            // 다음 클릭 시의 상태를 업데이트
                                            favoriteButton.onclick = function () {
                                                toggleFavorite(contentId, newIsFavorite, favoriteButton);
                                            };
                                        } else {
                                            console.error('Failed to update favorite status');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                    });
                        }

                        function toggleLike(contentId, isLike, likeButton) {
                            const url = isLike ? `/api/users/${contentId}/dislike` : `/api/users/${contentId}/like`;
                            fetch(url, {method: 'POST'})
                                    .then(response => {
                                        if (response.ok) {
                                            return response.json(); // JSON 데이터를 반환하도록 함
                                        } else {
                                            throw new Error('Failed to update like status');
                                        }
                                    }).then(data => {
                                // JSON 데이터를 성공적으로 받았을 때 실행
                                const newIsLike = data.isLiked; // 서버 응답에서 새로운 좋아요 상태 가져오기
                                // 버튼 아이콘 업데이트
                                likeButton.innerHTML = newIsLike ? '<i class="fa-solid fa-thumbs-up"></i>' : '<i class="fa-regular fa-thumbs-up"></i>';
                                // 다음 클릭 시의 상태를 업데이트
                                likeButton.onclick = function () {
                                    toggleLike(contentId, newIsLike, likeButton);
                                };
                            })
                                    .catch(error => {
                                        console.error('Error:', error);
                                    });
                        }
                    });
        }
    })
</script>